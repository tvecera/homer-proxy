/** Declaration file generated by dts-gen */

export class Controller {
  constructor(...args: any[]);

  login(...args: any[]): Promise<any>;

  logout(...args: any[]): Promise<any>;

  getAllUsers(...args: any[]): Promise<any>;

  getClientDevices(...args: any[]): Promise<any>;

  getSiteSysinfo(...args: any[]): Promise<any>;

  getSitesStats(...args: any[]): Promise<any>;

  adoptDevice(...args: any[]): void;

  advancedAdoptDevice(...args: any[]): void;

  archiveAlarms(...args: any[]): void;

  assignExistingAdmin(...args: any[]): void;

  authorizeGuest(...args: any[]): void;

  blockClient(...args: any[]): void;

  cancelRollingUpgrade(...args: any[]): void;

  checkControllerUpdate(...args: any[]): void;

  checkFirmwareUpdate(...args: any[]): void;

  clearDPIStatus(...args: any[]): void;

  cmdStat(...args: any[]): void;

  countAlarms(...args: any[]): void;

  createAPGroup(...args: any[]): void;

  createDynamicDNS(...args: any[]): void;

  createFirewallGroup(...args: any[]): void;

  createHotspotOperator(...args: any[]): void;

  createNetwork(...args: any[]): void;

  createRadiusAccount(...args: any[]): void;

  createSite(...args: any[]): void;

  createUser(...args: any[]): void;

  createUserGroup(...args: any[]): void;

  createVouchers(...args: any[]): void;

  createWLan(...args: any[]): void;

  customApiRequest(...args: any[]): void;

  deleteAPGroup(...args: any[]): void;

  deleteBackup(...args: any[]): void;

  deleteDevice(...args: any[]): void;

  deleteFirewallGroup(...args: any[]): void;

  deleteNetwork(...args: any[]): void;

  deleteRadiusAccount(...args: any[]): void;

  deleteSite(...args: any[]): void;

  deleteUserGroup(...args: any[]): void;

  deleteWLan(...args: any[]): void;

  disableAccessPoint(...args: any[]): void;

  disableWLan(...args: any[]): void;

  editAPGroup(...args: any[]): void;

  editClientFixedIP(...args: any[]): void;

  editClientName(...args: any[]): void;

  editFirewallGroup(...args: any[]): void;

  editUserGroup(...args: any[]): void;

  extendGuestValidity(...args: any[]): void;

  forceProvision(...args: any[]): void;

  forgetClient(...args: any[]): void;

  generateBackup(...args: any[]): void;

  generateBackupSite(...args: any[]): void;

  get5minApStats(...args: any[]): void;

  get5minGatewayStats(...args: any[]): void;

  get5minSiteStats(...args: any[]): void;

  get5minUserStats(...args: any[]): void;

  getAPGroups(...args: any[]): void;

  getAccessDevices(...args: any[]): void;

  getAccessDevicesBasic(...args: any[]): void;

  getAlarms(...args: any[]): void;

  getAllAuthorizations(...args: any[]): void;

  getBackups(...args: any[]): void;

  getBlockedUsers(...args: any[]): void;

  getClientDevice(...args: any[]): void;

  getCountryCodes(...args: any[]): void;

  getCurrentChannels(...args: any[]): void;

  getDPIStats(...args: any[]): void;

  getDailyApStats(...args: any[]): void;

  getDailyGatewayStats(...args: any[]): void;

  getDailySiteStats(...args: any[]): void;

  getDailyUserStats(...args: any[]): void;

  getDashboard(...args: any[]): void;

  getDeviceNameMappings(...args: any[]): void;

  getDeviceStates(...args: any[]): void;

  getDynamicDNS(...args: any[]): void;

  getEvents(...args: any[]): void;

  getFilteredDPIStats(...args: any[]): void;

  getFirewallGroups(...args: any[]): void;

  getFirewallRules(...args: any[]): void;

  getFirmware(...args: any[]): void;

  getFullStatus(...args: any[]): void;

  getGuests(...args: any[]): void;

  getHealth(...args: any[]): void;

  getHotspotOperators(...args: any[]): void;

  getHourlyApStats(...args: any[]): void;

  getHourlyGatewayStats(...args: any[]): void;

  getHourlySiteStats(...args: any[]): void;

  getHourlyUserStats(...args: any[]): void;

  getIPSEvents(...args: any[]): void;

  getKnownRogueAccessPoints(...args: any[]): void;

  getLatestSessions(...args: any[]): void;

  getMonthlyApStats(...args: any[]): void;

  getMonthlyGatewayStats(...args: any[]): void;

  getMonthlySiteStats(...args: any[]): void;

  getMonthlyUserStats(...args: any[]): void;

  getNetworkConf(...args: any[]): void;

  getPayments(...args: any[]): void;

  getPortConfig(...args: any[]): void;

  getPortForwarding(...args: any[]): void;

  getPortForwardingStats(...args: any[]): void;

  getRogueAccessPoints(...args: any[]): void;

  getRouting(...args: any[]): void;

  getSelf(...args: any[]): void;

  getSessions(...args: any[]): void;

  getSiteSettings(...args: any[]): void;

  getSites(...args: any[]): void;

  getSpectrumScanState(...args: any[]): void;

  getSpeedTestResults(...args: any[]): void;

  getSpeedTestStatus(...args: any[]): void;

  getStatus(...args: any[]): void;

  getUserGroups(...args: any[]): void;

  getUsers(...args: any[]): void;

  getVoipExtensions(...args: any[]): void;

  getVouchers(...args: any[]): void;

  getWLanGroups(...args: any[]): void;

  getWLanSettings(...args: any[]): void;

  inviteAdmin(...args: any[]): void;

  listAdmins(...args: any[]): void;

  listAllAdmins(...args: any[]): void;

  listRadiusAccounts(...args: any[]): void;

  listRadiusProfiles(...args: any[]): void;

  listTags(...args: any[]): void;

  listen(...args: any[]): void;

  moveDevice(...args: any[]): void;

  powerCycleSwitchPort(...args: any[]): void;

  rebootCloudKey(...args: any[]): void;

  reconnectClient(...args: any[]): void;

  renameAccessPoint(...args: any[]): void;

  restartDevice(...args: any[]): void;

  revokeAdmin(...args: any[]): void;

  revokeVoucher(...args: any[]): void;

  runSpectrumScan(...args: any[]): void;

  runSpeedTest(...args: any[]): void;

  setAccessPointRadioSettings(...args: any[]): void;

  setAccessPointWLanGroup(...args: any[]): void;

  setClientName(...args: any[]): void;

  setClientNote(...args: any[]): void;

  setDeviceSettingsBase(...args: any[]): void;

  setDynamicDNS(...args: any[]): void;

  setElementAdoption(...args: any[]): void;

  setGuestLoginSettings(...args: any[]): void;

  setGuestLoginSettingsBase(...args: any[]): void;

  setIPSSettingsBase(...args: any[]): void;

  setLEDOverride(...args: any[]): void;

  setLocateAccessPoint(...args: any[]): void;

  setNetworkSettingsBase(...args: any[]): void;

  setPortForwarding(...args: any[]): void;

  setRadiusAccountBase(...args: any[]): void;

  setSiteConnectivity(...args: any[]): void;

  setSiteCountry(...args: any[]): void;

  setSiteGuestAccess(...args: any[]): void;

  setSiteLEDs(...args: any[]): void;

  setSiteLocale(...args: any[]): void;

  setSiteMgmt(...args: any[]): void;

  setSiteNTP(...args: any[]): void;

  setSiteName(...args: any[]): void;

  setSiteSNMP(...args: any[]): void;

  setSuperIdentitySettingsBase(...args: any[]): void;

  setSuperMgmtSettingsBase(...args: any[]): void;

  setSuperSMTPSettingsBase(...args: any[]): void;

  setUserGroup(...args: any[]): void;

  setWLanMacFilter(...args: any[]): void;

  setWLanSettings(...args: any[]): void;

  setWLanSettingsBase(...args: any[]): void;

  startRollingUpgrade(...args: any[]): void;

  unauthorizeGuest(...args: any[]): void;

  unblockClient(...args: any[]): void;

  upgradeDevice(...args: any[]): void;

  upgradeDeviceExternal(...args: any[]): void;

  upgradeExternalFirmware(...args: any[]): void;

  static defaultMaxListeners: number;

  static once(emitter: any, name: any, options: any, ...args: any[]): any;
}

export namespace Controller {
  class EventEmitter2 {
    constructor(conf: any);

    addListener(type: any, listener: any, options: any): any;

    emit(...args: any[]): any;

    emitAsync(...args: any[]): any;

    eventNames(nsAsArray: any): any;

    getMaxListeners(): any;

    hasListeners(type: any): any;

    listenTo(target: any, events: any, options: any): any;

    listenerCount(type: any): any;

    listeners(type: any): any;

    listenersAny(): any;

    many(event: any, ttl: any, fn: any, options: any): any;

    off(type: any, listener: any): any;

    offAny(fn: any): any;

    on(type: any, listener: any, options: any): any;

    onAny(fn: any): any;

    once(event: any, fn: any, options: any): any;

    prependAny(fn: any): any;

    prependListener(type: any, listener: any, options: any): any;

    prependMany(event: any, ttl: any, fn: any, options: any): any;

    prependOnceListener(event: any, fn: any, options: any): any;

    removeAllListeners(type: any): any;

    removeListener(type: any, listener: any): any;

    setMaxListeners(n: any): void;

    stopListeningTo(target: any, event: any): any;

    waitFor(event: any, options: any, ...args: any[]): any;

    static EventEmitter2: any;

    static defaultMaxListeners: number;

    static once(emitter: any, name: any, options: any, ...args: any[]): any;
  }
}
